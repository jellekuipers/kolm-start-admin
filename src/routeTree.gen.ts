/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as authenticatedIndexRouteImport } from './routes/(authenticated)/index'
import { Route as authenticatedProfileRouteImport } from './routes/(authenticated)/profile'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authenticatedUsersIndexRouteImport } from './routes/(authenticated)/users.index'
import { Route as ApiMetricsSplatRouteImport } from './routes/api/metrics.$'
import { Route as ApiHealthSplatRouteImport } from './routes/api/health.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as authenticatedUsersUserIdRouteImport } from './routes/(authenticated)/users.$userId'
import { Route as authenticatedUsersUserIdIndexRouteImport } from './routes/(authenticated)/users.$userId.index'
import { Route as authenticatedUsersUserIdSessionsRouteImport } from './routes/(authenticated)/users.$userId.sessions'

const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedIndexRoute = authenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedProfileRoute = authenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)
const authenticatedUsersIndexRoute = authenticatedUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const ApiMetricsSplatRoute = ApiMetricsSplatRouteImport.update({
  id: '/api/metrics/$',
  path: '/api/metrics/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiHealthSplatRoute = ApiHealthSplatRouteImport.update({
  id: '/api/health/$',
  path: '/api/health/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedUsersUserIdRoute =
  authenticatedUsersUserIdRouteImport.update({
    id: '/users/$userId',
    path: '/users/$userId',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const authenticatedUsersUserIdIndexRoute =
  authenticatedUsersUserIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => authenticatedUsersUserIdRoute,
  } as any)
const authenticatedUsersUserIdSessionsRoute =
  authenticatedUsersUserIdSessionsRouteImport.update({
    id: '/sessions',
    path: '/sessions',
    getParentRoute: () => authenticatedUsersUserIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/sign-in': typeof authSignInRoute
  '/profile': typeof authenticatedProfileRoute
  '/': typeof authenticatedIndexRoute
  '/users/$userId': typeof authenticatedUsersUserIdRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/health/$': typeof ApiHealthSplatRoute
  '/api/metrics/$': typeof ApiMetricsSplatRoute
  '/users': typeof authenticatedUsersIndexRoute
  '/users/$userId/sessions': typeof authenticatedUsersUserIdSessionsRoute
  '/users/$userId/': typeof authenticatedUsersUserIdIndexRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof authSignInRoute
  '/profile': typeof authenticatedProfileRoute
  '/': typeof authenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/health/$': typeof ApiHealthSplatRoute
  '/api/metrics/$': typeof ApiMetricsSplatRoute
  '/users': typeof authenticatedUsersIndexRoute
  '/users/$userId/sessions': typeof authenticatedUsersUserIdSessionsRoute
  '/users/$userId': typeof authenticatedUsersUserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(authenticated)/profile': typeof authenticatedProfileRoute
  '/(authenticated)/': typeof authenticatedIndexRoute
  '/(authenticated)/users/$userId': typeof authenticatedUsersUserIdRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/health/$': typeof ApiHealthSplatRoute
  '/api/metrics/$': typeof ApiMetricsSplatRoute
  '/(authenticated)/users/': typeof authenticatedUsersIndexRoute
  '/(authenticated)/users/$userId/sessions': typeof authenticatedUsersUserIdSessionsRoute
  '/(authenticated)/users/$userId/': typeof authenticatedUsersUserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sign-in'
    | '/profile'
    | '/'
    | '/users/$userId'
    | '/api/auth/$'
    | '/api/health/$'
    | '/api/metrics/$'
    | '/users'
    | '/users/$userId/sessions'
    | '/users/$userId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/sign-in'
    | '/profile'
    | '/'
    | '/api/auth/$'
    | '/api/health/$'
    | '/api/metrics/$'
    | '/users'
    | '/users/$userId/sessions'
    | '/users/$userId'
  id:
    | '__root__'
    | '/(auth)'
    | '/(authenticated)'
    | '/(auth)/sign-in'
    | '/(authenticated)/profile'
    | '/(authenticated)/'
    | '/(authenticated)/users/$userId'
    | '/api/auth/$'
    | '/api/health/$'
    | '/api/metrics/$'
    | '/(authenticated)/users/'
    | '/(authenticated)/users/$userId/sessions'
    | '/(authenticated)/users/$userId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiHealthSplatRoute: typeof ApiHealthSplatRoute
  ApiMetricsSplatRoute: typeof ApiMetricsSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/profile': {
      id: '/(authenticated)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof authenticatedProfileRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(authenticated)/users/': {
      id: '/(authenticated)/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof authenticatedUsersIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/api/metrics/$': {
      id: '/api/metrics/$'
      path: '/api/metrics/$'
      fullPath: '/api/metrics/$'
      preLoaderRoute: typeof ApiMetricsSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/health/$': {
      id: '/api/health/$'
      path: '/api/health/$'
      fullPath: '/api/health/$'
      preLoaderRoute: typeof ApiHealthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/users/$userId': {
      id: '/(authenticated)/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof authenticatedUsersUserIdRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/users/$userId/': {
      id: '/(authenticated)/users/$userId/'
      path: '/'
      fullPath: '/users/$userId/'
      preLoaderRoute: typeof authenticatedUsersUserIdIndexRouteImport
      parentRoute: typeof authenticatedUsersUserIdRoute
    }
    '/(authenticated)/users/$userId/sessions': {
      id: '/(authenticated)/users/$userId/sessions'
      path: '/sessions'
      fullPath: '/users/$userId/sessions'
      preLoaderRoute: typeof authenticatedUsersUserIdSessionsRouteImport
      parentRoute: typeof authenticatedUsersUserIdRoute
    }
  }
}

interface authRouteRouteChildren {
  authSignInRoute: typeof authSignInRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSignInRoute: authSignInRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface authenticatedUsersUserIdRouteChildren {
  authenticatedUsersUserIdSessionsRoute: typeof authenticatedUsersUserIdSessionsRoute
  authenticatedUsersUserIdIndexRoute: typeof authenticatedUsersUserIdIndexRoute
}

const authenticatedUsersUserIdRouteChildren: authenticatedUsersUserIdRouteChildren =
  {
    authenticatedUsersUserIdSessionsRoute:
      authenticatedUsersUserIdSessionsRoute,
    authenticatedUsersUserIdIndexRoute: authenticatedUsersUserIdIndexRoute,
  }

const authenticatedUsersUserIdRouteWithChildren =
  authenticatedUsersUserIdRoute._addFileChildren(
    authenticatedUsersUserIdRouteChildren,
  )

interface authenticatedRouteRouteChildren {
  authenticatedProfileRoute: typeof authenticatedProfileRoute
  authenticatedIndexRoute: typeof authenticatedIndexRoute
  authenticatedUsersUserIdRoute: typeof authenticatedUsersUserIdRouteWithChildren
  authenticatedUsersIndexRoute: typeof authenticatedUsersIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedProfileRoute: authenticatedProfileRoute,
  authenticatedIndexRoute: authenticatedIndexRoute,
  authenticatedUsersUserIdRoute: authenticatedUsersUserIdRouteWithChildren,
  authenticatedUsersIndexRoute: authenticatedUsersIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiHealthSplatRoute: ApiHealthSplatRoute,
  ApiMetricsSplatRoute: ApiMetricsSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
