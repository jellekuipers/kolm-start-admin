/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as DashboardProfileRouteImport } from './routes/_dashboard/profile'
import { Route as DashboardUsersIndexRouteImport } from './routes/_dashboard/users.index'
import { Route as DashboardUsersUserIdRouteImport } from './routes/_dashboard/users.$userId'
import { Route as DashboardUsersUserIdIndexRouteImport } from './routes/_dashboard/users.$userId.index'
import { Route as DashboardUsersUserIdSessionsRouteImport } from './routes/_dashboard/users.$userId.sessions'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)
const DashboardProfileRoute = DashboardProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUsersUserIdRoute = DashboardUsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUsersUserIdIndexRoute =
  DashboardUsersUserIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardUsersUserIdRoute,
  } as any)
const DashboardUsersUserIdSessionsRoute =
  DashboardUsersUserIdSessionsRouteImport.update({
    id: '/sessions',
    path: '/sessions',
    getParentRoute: () => DashboardUsersUserIdRoute,
  } as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteWithChildren
  '/profile': typeof DashboardProfileRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/': typeof DashboardIndexRoute
  '/users/$userId': typeof DashboardUsersUserIdRouteWithChildren
  '/users': typeof DashboardUsersIndexRoute
  '/users/$userId/sessions': typeof DashboardUsersUserIdSessionsRoute
  '/users/$userId/': typeof DashboardUsersUserIdIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/profile': typeof DashboardProfileRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/': typeof DashboardIndexRoute
  '/users': typeof DashboardUsersIndexRoute
  '/users/$userId/sessions': typeof DashboardUsersUserIdSessionsRoute
  '/users/$userId': typeof DashboardUsersUserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/_dashboard/profile': typeof DashboardProfileRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/users/$userId': typeof DashboardUsersUserIdRouteWithChildren
  '/_dashboard/users/': typeof DashboardUsersIndexRoute
  '/_dashboard/users/$userId/sessions': typeof DashboardUsersUserIdSessionsRoute
  '/_dashboard/users/$userId/': typeof DashboardUsersUserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/profile'
    | '/auth/sign-in'
    | '/'
    | '/users/$userId'
    | '/users'
    | '/users/$userId/sessions'
    | '/users/$userId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/profile'
    | '/auth/sign-in'
    | '/'
    | '/users'
    | '/users/$userId/sessions'
    | '/users/$userId'
  id:
    | '__root__'
    | '/_dashboard'
    | '/auth'
    | '/_dashboard/profile'
    | '/auth/sign-in'
    | '/_dashboard/'
    | '/_dashboard/users/$userId'
    | '/_dashboard/users/'
    | '/_dashboard/users/$userId/sessions'
    | '/_dashboard/users/$userId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_dashboard/profile': {
      id: '/_dashboard/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof DashboardProfileRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/users/': {
      id: '/_dashboard/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof DashboardUsersIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/users/$userId': {
      id: '/_dashboard/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof DashboardUsersUserIdRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/users/$userId/': {
      id: '/_dashboard/users/$userId/'
      path: '/'
      fullPath: '/users/$userId/'
      preLoaderRoute: typeof DashboardUsersUserIdIndexRouteImport
      parentRoute: typeof DashboardUsersUserIdRoute
    }
    '/_dashboard/users/$userId/sessions': {
      id: '/_dashboard/users/$userId/sessions'
      path: '/sessions'
      fullPath: '/users/$userId/sessions'
      preLoaderRoute: typeof DashboardUsersUserIdSessionsRouteImport
      parentRoute: typeof DashboardUsersUserIdRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface DashboardUsersUserIdRouteChildren {
  DashboardUsersUserIdSessionsRoute: typeof DashboardUsersUserIdSessionsRoute
  DashboardUsersUserIdIndexRoute: typeof DashboardUsersUserIdIndexRoute
}

const DashboardUsersUserIdRouteChildren: DashboardUsersUserIdRouteChildren = {
  DashboardUsersUserIdSessionsRoute: DashboardUsersUserIdSessionsRoute,
  DashboardUsersUserIdIndexRoute: DashboardUsersUserIdIndexRoute,
}

const DashboardUsersUserIdRouteWithChildren =
  DashboardUsersUserIdRoute._addFileChildren(DashboardUsersUserIdRouteChildren)

interface DashboardRouteChildren {
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardUsersUserIdRoute: typeof DashboardUsersUserIdRouteWithChildren
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardUsersUserIdRoute: DashboardUsersUserIdRouteWithChildren,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
